<?xml version="1.0" encoding="UTF-8"?>

<!-- 
2. web.xml에 설정하고 JNDI로 부터 DataSource 취득하기
[web.xml]
 -->
<resource-ref>
<description>MDB DB Connection</description>
<res-ref-name>jdbc/DS_EDU</res-ref-name>
<res-type>javax.sql.DataSource</res-type>
<res-auth>Container</res-auth>
</resource-ref>
 
 <!-- 
JNDI로 부터 DataSource 취득
Spring에서는 DataSource를 애플리케이션의 다른 서비스 객체들과 마찬가지로 스프링 빈으로 취급하는데, 이경우 JndiObjectFactoryBean을 사용한다.
  -->
<bean id=“dataSource” 
    class=“org.springframework.jndi.JndiObjectFactoryBean”>
    <property name=“jndiName”>
          <value>java:comp/env/jdbc/myDataSource</value>
     </property></bean>
 
 
 
 
 
 
 
 
 
   
      <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/service-config.xml</param-value>
    </context-param>
        
  
    
    <servlet>
        <servlet-name>action</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>namespace</param-name>
            <param-value>action-*</param-value>
        </init-param>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>action</servlet-name>
        <url-pattern>*.kv</url-pattern>
    </servlet-mapping>
    
    <servlet-mapping>
        <servlet-name>action</servlet-name>
        <url-pattern>*.kx</url-pattern>
    </servlet-mapping>
    